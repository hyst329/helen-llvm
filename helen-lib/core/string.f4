include string.f4i

declare malloc(int(32) n) -> ptr char style(C)
declare realloc(ptr char c, int(32) n) -> ptr char style(C)
declare free(ptr char c) style(C)
declare memset(ptr char p, int(32) val, int(32) n) style(C)
declare memcpy(ptr char c1, ptr char c2, int(32) num) -> ptr char style(C)

fun constructor String()
    this.length = 0:32
    this.capacity = 1:32
    this.cstr = malloc(this.capacity)
endfun

#fun constructor String(ptr char src, int(32) len)
#    this.length = len
#    this.capacity = len
#    this.cstr = malloc(this.capacity)
#    memcpy(this.cstr, src, len)
#endfun

fun destructor String()
    free(this.cstr)
endfun

fun copy() -> String method(String)
    String ns = new String
    ns.length = this.length
    ns.capacity = this.capacity
    ns.cstr = realloc(ns.cstr, ns.capacity)
    memcpy(ns.cstr, this.cstr, this.length)
    return ns
endfun

#fun operator + (String s, char c) -> String
#    String ns = s.copy()
#    if ns.length == ns.capacity
#        ns.capacity = 2 * ns.capacity
#        ns.cstr = realloc(ns.cstr, ns.capacity)
#    endif
#    ptr char nch = ns.cstr shiftby ns.length
#    ns.length = ns.length + 1
#    memset(nch, cast c to int(32), 1)
#    return ns
#endfun

#fun operator + (String s1, String s2) -> String
#    # TODO: Adjust capacity (make it power of 2)
#    String ns = s1.copy()
#    if s1.length + s2.length > ns.capacity
#        ns.capacity = s1.length + s2.length
#        ns.cstr = realloc(ns.cstr, ns.capacity)
#    endif
#    ptr char nch = ns.cstr shiftby s1.length
#    memcpy(ns.cstr, s2.cstr, s2.length)
#    ns.length = s1.length + s2.length
#    return ns
#endfun